
Ademhalingsmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000025a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000958  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  00001493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ec  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8e:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initADC>:
}

void initADC()
{
	// Welke Voltage reference nodig (table 23-3)
	ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX2); // Voltage Reference: AVcc witch external capacitator at AREF pin - Analog Channel = ADC5
  96:	85 e4       	ldi	r24, 0x45	; 69
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS2); // Prescaler 32
  9c:	85 e8       	ldi	r24, 0x85	; 133
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a2:	08 95       	ret

000000a4 <initUsart>:
}

void initUsart()
{
	UCSR0A = 0;
  a4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0); /* Enable de USART Transmitter */
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); /* 8 data bits, 1 stop bit */
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H=00;
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=103; /* baudrade 9600 */
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	08 95       	ret

000000c0 <writeChar>:
}

void writeChar(char x)
{
	while (~UCSR0A & (1 << UDRE0));
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <writeChar>
	UDR0 = x;
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <writeString>:
}

void writeString(char st[])
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	8c 01       	movw	r16, r24
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <writeString+0x12>
	writeChar(st[i]);
  da:	0e 94 60 00 	call	0xc0	; 0xc0 <writeChar>
	UDR0 = x;
}

void writeString(char st[])
{
	for(uint8_t i = 0 ; st[i] != 0 ; i++)
  de:	cf 5f       	subi	r28, 0xFF	; 255
  e0:	f8 01       	movw	r30, r16
  e2:	ec 0f       	add	r30, r28
  e4:	f1 1d       	adc	r31, r1
  e6:	80 81       	ld	r24, Z
  e8:	81 11       	cpse	r24, r1
  ea:	f7 cf       	rjmp	.-18     	; 0xda <writeString+0xc>
	writeChar(st[i]);
}
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <writeInt>:

void writeInt(int i)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	28 97       	sbiw	r28, 0x08	; 8
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	char buffer[8];
	itoa(i,buffer,10);
 108:	4a e0       	ldi	r20, 0x0A	; 10
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	be 01       	movw	r22, r28
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <itoa>
	writeString(buffer);
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <writeString>
}
 11e:	28 96       	adiw	r28, 0x08	; 8
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <leesADCwaarde>:

uint16_t leesADCwaarde()
{
	ADCSRA |= (1 << ADSC | 1 << ADIF); /* start ADC conversion */
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 65       	ori	r24, 0x50	; 80
 138:	80 83       	st	Z, r24
	while(~ADCSRA & (1 << ADIF));
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	84 ff       	sbrs	r24, 4
 140:	fc cf       	rjmp	.-8      	; 0x13a <leesADCwaarde+0xa>
	uint16_t a = ADC;
 142:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 146:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//	a %= 10; // werkt niet maar was wel fijner om te lezen omdat de schaal kleiner was.
	return a;
}
 14a:	08 95       	ret

0000014c <printUsart>:

void printUsart(uint16_t x)
{
	writeInt(x);
 14c:	0e 94 7a 00 	call	0xf4	; 0xf4 <writeInt>
	writeString("\n\r");
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 67 00 	call	0xce	; 0xce <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	9c e0       	ldi	r25, 0x0C	; 12
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <printUsart+0x12>
 166:	00 c0       	rjmp	.+0      	; 0x168 <printUsart+0x1c>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <main>:
uint16_t leesADCwaarde();
void printUsart(uint16_t a);

int main(void)
{
	initADC();
 16c:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	initUsart();
 170:	0e 94 52 00 	call	0xa4	; 0xa4 <initUsart>
	uint16_t adcWaarde;
	uint16_t adcWaardeTotaal = 0;
 174:	00 e0       	ldi	r16, 0x00	; 0
 176:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		for (int i = 0; i < 15; i++) {
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	05 c0       	rjmp	.+10     	; 0x188 <main+0x1c>
			adcWaarde = leesADCwaarde();
 17e:	0e 94 98 00 	call	0x130	; 0x130 <leesADCwaarde>
			adcWaardeTotaal += adcWaarde;
 182:	08 0f       	add	r16, r24
 184:	19 1f       	adc	r17, r25
	uint16_t adcWaarde;
	uint16_t adcWaardeTotaal = 0;
	
    while (1) 
    {
		for (int i = 0; i < 15; i++) {
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	cf 30       	cpi	r28, 0x0F	; 15
 18a:	d1 05       	cpc	r29, r1
 18c:	c4 f3       	brlt	.-16     	; 0x17e <main+0x12>
			adcWaarde = leesADCwaarde();
			adcWaardeTotaal += adcWaarde;
		}
		
		adcWaardeTotaal /= 15;
 18e:	98 01       	movw	r18, r16
 190:	a9 e8       	ldi	r26, 0x89	; 137
 192:	b8 e8       	ldi	r27, 0x88	; 136
 194:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__umulhisi3>
 198:	8c 01       	movw	r16, r24
 19a:	16 95       	lsr	r17
 19c:	07 95       	ror	r16
 19e:	16 95       	lsr	r17
 1a0:	07 95       	ror	r16
 1a2:	16 95       	lsr	r17
 1a4:	07 95       	ror	r16
		//adcWaarde *= 1.5;
		//adcWaarde /= 10;
		//adcWaarde -= 20;
		//adcWaarde *= 1.5;
	
		if(adcWaardeTotaal > 250)
 1a6:	0b 3f       	cpi	r16, 0xFB	; 251
 1a8:	11 05       	cpc	r17, r1
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <main+0x44>
		adcWaardeTotaal = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
		if(adcWaardeTotaal < 0)
		adcWaardeTotaal = 0;
	
		
		printUsart(adcWaardeTotaal);
 1b0:	c8 01       	movw	r24, r16
 1b2:	0e 94 a6 00 	call	0x14c	; 0x14c <printUsart>
    }
 1b6:	e0 cf       	rjmp	.-64     	; 0x178 <main+0xc>

000001b8 <__umulhisi3>:
 1b8:	a2 9f       	mul	r26, r18
 1ba:	b0 01       	movw	r22, r0
 1bc:	b3 9f       	mul	r27, r19
 1be:	c0 01       	movw	r24, r0
 1c0:	a3 9f       	mul	r26, r19
 1c2:	70 0d       	add	r23, r0
 1c4:	81 1d       	adc	r24, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	91 1d       	adc	r25, r1
 1ca:	b2 9f       	mul	r27, r18
 1cc:	70 0d       	add	r23, r0
 1ce:	81 1d       	adc	r24, r1
 1d0:	11 24       	eor	r1, r1
 1d2:	91 1d       	adc	r25, r1
 1d4:	08 95       	ret

000001d6 <itoa>:
 1d6:	45 32       	cpi	r20, 0x25	; 37
 1d8:	51 05       	cpc	r21, r1
 1da:	20 f4       	brcc	.+8      	; 0x1e4 <itoa+0xe>
 1dc:	42 30       	cpi	r20, 0x02	; 2
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <itoa+0xe>
 1e0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__itoa_ncheck>
 1e4:	fb 01       	movw	r30, r22
 1e6:	10 82       	st	Z, r1
 1e8:	cb 01       	movw	r24, r22
 1ea:	08 95       	ret

000001ec <__itoa_ncheck>:
 1ec:	bb 27       	eor	r27, r27
 1ee:	4a 30       	cpi	r20, 0x0A	; 10
 1f0:	31 f4       	brne	.+12     	; 0x1fe <__itoa_ncheck+0x12>
 1f2:	99 23       	and	r25, r25
 1f4:	22 f4       	brpl	.+8      	; 0x1fe <__itoa_ncheck+0x12>
 1f6:	bd e2       	ldi	r27, 0x2D	; 45
 1f8:	90 95       	com	r25
 1fa:	81 95       	neg	r24
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	0c 94 02 01 	jmp	0x204	; 0x204 <__utoa_common>

00000202 <__utoa_ncheck>:
 202:	bb 27       	eor	r27, r27

00000204 <__utoa_common>:
 204:	fb 01       	movw	r30, r22
 206:	55 27       	eor	r21, r21
 208:	aa 27       	eor	r26, r26
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	aa 1f       	adc	r26, r26
 210:	a4 17       	cp	r26, r20
 212:	10 f0       	brcs	.+4      	; 0x218 <__utoa_common+0x14>
 214:	a4 1b       	sub	r26, r20
 216:	83 95       	inc	r24
 218:	50 51       	subi	r21, 0x10	; 16
 21a:	b9 f7       	brne	.-18     	; 0x20a <__utoa_common+0x6>
 21c:	a0 5d       	subi	r26, 0xD0	; 208
 21e:	aa 33       	cpi	r26, 0x3A	; 58
 220:	08 f0       	brcs	.+2      	; 0x224 <__utoa_common+0x20>
 222:	a9 5d       	subi	r26, 0xD9	; 217
 224:	a1 93       	st	Z+, r26
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	79 f7       	brne	.-34     	; 0x208 <__utoa_common+0x4>
 22a:	b1 11       	cpse	r27, r1
 22c:	b1 93       	st	Z+, r27
 22e:	11 92       	st	Z+, r1
 230:	cb 01       	movw	r24, r22
 232:	0c 94 1b 01 	jmp	0x236	; 0x236 <strrev>

00000236 <strrev>:
 236:	dc 01       	movw	r26, r24
 238:	fc 01       	movw	r30, r24
 23a:	67 2f       	mov	r22, r23
 23c:	71 91       	ld	r23, Z+
 23e:	77 23       	and	r23, r23
 240:	e1 f7       	brne	.-8      	; 0x23a <strrev+0x4>
 242:	32 97       	sbiw	r30, 0x02	; 2
 244:	04 c0       	rjmp	.+8      	; 0x24e <strrev+0x18>
 246:	7c 91       	ld	r23, X
 248:	6d 93       	st	X+, r22
 24a:	70 83       	st	Z, r23
 24c:	62 91       	ld	r22, -Z
 24e:	ae 17       	cp	r26, r30
 250:	bf 07       	cpc	r27, r31
 252:	c8 f3       	brcs	.-14     	; 0x246 <strrev+0x10>
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
